// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/adapter-service/internal/config"
	"github.com/aerosystems/adapter-service/internal/infrastructure/http"
	"github.com/aerosystems/adapter-service/internal/infrastructure/http/handlers"
	"github.com/aerosystems/adapter-service/internal/repository/verifire"
	"github.com/aerosystems/adapter-service/internal/usecases"
	"github.com/aerosystems/adapter-service/pkg/logger"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	api := ProvideVerifireApi(config)
	proxyUsecase := ProvideProxyUsecase(api)
	inspectHandler := ProvideInspectHandler(proxyUsecase)
	server := ProvideHttpServer(logrusLogger, config, inspectHandler)
	app := ProvideApp(logrusLogger, config, server)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server) *App {
	app := NewApp(log, cfg, httpServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideInspectHandler(proxyUsecase handlers.ProxyUsecase) *handlers.InspectHandler {
	inspectHandler := handlers.NewInspectHandler(proxyUsecase)
	return inspectHandler
}

func ProvideProxyUsecase(checkmailRepo usecases.VerifireRepository) *usecases.ProxyUsecase {
	proxyUsecase := usecases.NewProxyUsecase(checkmailRepo)
	return proxyUsecase
}

// wire.go:

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, inspectHandler *handlers.InspectHandler) *HttpServer.Server {
	return HttpServer.NewServer(log, cfg.AccessSecret, inspectHandler)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideVerifireApi(cfg *config.Config) *verifire.Api {
	return verifire.NewApi(cfg.VerifireBaseURL)
}
